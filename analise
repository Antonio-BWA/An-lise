# -*- coding: utf-8 -*-
"""
An√°lise Fiscal Completa - Streamlit App
Autor: Antonio-BWA
Reposit√≥rio: https://github.com/Antonio-BWA/An-lise.git
"""

import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
import base64
from io import BytesIO
import xlsxwriter
import zipfile
import tempfile
import os
import subprocess

# =============================================
# 1. CONFIGURA√á√ÉO INICIAL DO REPOSIT√ìRIO GIT
# =============================================

def init_git_repo():
    """Inicializa o reposit√≥rio Git se n√£o existir"""
    if not os.path.exists('.git'):
        try:
            subprocess.run(['git', 'init'], check=True)
            if not os.path.exists('README.md'):
                with open('README.md', 'w') as f:
                    f.write("# An√°lise Fiscal\n\nAplica√ß√£o para segrega√ß√£o de dados fiscais")
            subprocess.run(['git', 'add', 'README.md'], check=True)
            subprocess.run(['git', 'commit', '-m', 'primeiro commit'], check=True)
            subprocess.run(['git', 'branch', '-M', 'main'], check=True)
            subprocess.run(['git', 'remote', 'add', 'origin', 
                          'https://github.com/Antonio-BWA/An-lise.git'], check=True)
            subprocess.run(['git', 'push', '-u', 'origin', 'main'], check=True)
            st.success("Reposit√≥rio Git inicializado com sucesso!")
        except subprocess.CalledProcessError as e:
            st.warning(f"Erro ao configurar Git: {e}")

# =============================================
# 2. CONFIGURA√á√ÉO DA APLICA√á√ÉO
# =============================================

# Configura√ß√£o segura do estado da sess√£o
def setup_session_state():
    """Garante que todas as vari√°veis de estado existam"""
    defaults = {
        'processed_data': None,
        'canceled_numbers': set(),
        'empresa_cnpj': None,
        'devolucoes': {
            'possui': False,
            'valores': {'1202': 0, '2202': 0, '1411': 0, '2411': 0}
        },
        'show_devolucoes': False,
        'file_uploaded': False
    }
    
    for key, value in defaults.items():
        if key not in st.session_state:
            st.session_state[key] = value

# Inicializa√ß√£o segura
try:
    st.set_page_config(
        page_title="Segrega√ß√£o Fiscal",
        page_icon="üìä",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    setup_session_state()
    init_git_repo()
except Exception as e:
    st.error(f"Erro na inicializa√ß√£o: {str(e)}")
    st.stop()

# =============================================
# 3. FUN√á√ïES AUXILIARES
# =============================================

def format_number(value):
    """Formata n√∫meros para exibi√ß√£o brasileira"""
    try:
        num = float(value or 0)
        return f"{num:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
    except:
        return "0,00"

def get_competencia_from_chave(chave):
    """Extrai compet√™ncia (MM-AA) da chave da NF-e"""
    if not chave or not isinstance(chave, str) or len(chave) < 44:
        return 'Desconhecido'
    try:
        return f"{chave[4:6]}-{chave[2:4]}"
    except:
        return 'Desconhecido'

def get_cnpj_from_chave(chave):
    """Extrai CNPJ formatado da chave da NF-e"""
    if not chave or not isinstance(chave, str) or len(chave) < 44:
        return None
    try:
        cnpj = chave[6:20]
        return f"{cnpj[:2]}.{cnpj[2:5]}.{cnpj[5:8]}/{cnpj[8:12]}-{cnpj[12:14]}"
    except:
        return None

def find_missing_numbers(doc_numbers):
    """Identifica n√∫meros faltantes na sequ√™ncia"""
    if not doc_numbers:
        return []
    
    nums = [int(n) for n in doc_numbers if str(n).isdigit()]
    if not nums:
        return []
    
    return sorted(set(range(min(nums), max(nums) + 1)) - set(nums))

# =============================================
# 4. L√ìGICA PRINCIPAL DE PROCESSAMENTO
# =============================================

def analyze_data(data):
    """Processa os dados fiscais e calcula m√©tricas"""
    df = pd.DataFrame(data)
    result = {
        'missingNumbers': {},
        'cfopTotals': {},
        'rawData': data,
        'hasDevolucoes': False
    }
    
    # Processa s√©ries e n√∫meros faltantes
    if 'ser' in df.columns and 'num_doc' in df.columns:
        for serie, group in df.groupby('ser'):
            nums = group['num_doc'].dropna().astype(str).str.extract(r'(\d+)')[0]
            if not nums.empty:
                result['missingNumbers'][serie or '√önica'] = find_missing_numbers(nums.astype(int))

    # Processa valores por CFOP
    if 'cfop' in df.columns and 'vl_item' in df.columns:
        df['cfop'] = df['cfop'].astype(str)
        df['vl_item'] = pd.to_numeric(df['vl_item'], errors='coerce').fillna(0)
        result['cfopTotals'] = df.groupby('cfop')['vl_item'].sum().to_dict()
        
        # Categorias fiscais
        if 'monofasico' in df.columns:
            df['monofasico'] = df['monofasico'].astype(str).str.lower().isin(['true', 'sim', '1', 'yes'])
            
            mask_trib = df['cfop'].isin(['5101', '5102', '6101', '6102'])
            result['tributadoNormal'] = df.loc[mask_trib & ~df['monofasico'], 'vl_item'].sum()
            result['tributadoMonofasico'] = df.loc[mask_trib & df['monofasico'], 'vl_item'].sum()
            
            mask_sub = df['cfop'].isin(['5405', '6404'])
            result['substitutoNormal'] = df.loc[mask_sub & ~df['monofasico'], 'vl_item'].sum()
            result['substitutoMonofasico'] = df.loc[mask_sub & df['monofasico'], 'vl_item'].sum()
    
    # Totais e devolu√ß√µes
    result['totalFaturamento'] = sum(result.get(k, 0) for k in [
        'tributadoNormal', 'tributadoMonofasico', 
        'substitutoNormal', 'substitutoMonofasico'
    ])
    
    result['totalDevolucoes'] = sum(st.session_state.devolucoes['valores'].values())
    result['totalLiquido'] = result['totalFaturamento'] - result['totalDevolucoes']
    result['hasDevolucoes'] = any(df['cfop'].astype(str).str.startswith(('1202', '2202', '1411', '2411'))) or st.session_state.devolucoes['possui']
    
    return result

# =============================================
# 5. INTERFACE DO USU√ÅRIO
# =============================================

# CSS Customizado
st.markdown("""
<style>
    .stApp { max-width: 1200px; margin: 0 auto; padding: 2rem; }
    .stButton>button { transition: all 0.3s; }
    .stButton>button:hover { transform: scale(1.02); }
    .negative-value { color: #e74c3c !important; }
    .highlight-row { background-color: #e3f2fd !important; }
</style>
""", unsafe_allow_html=True)

# T√≠tulo principal
st.title("üìä Segrega√ß√£o Fiscal")
st.markdown("---")

# Upload de arquivo
with st.container():
    uploaded_file = st.file_uploader(
        "Carregue sua planilha fiscal (Excel)",
        type=["xlsx", "xls"],
        accept_multiple_files=False,
        key="file_uploader"
    )
    
    if uploaded_file and not st.session_state.file_uploaded:
        with st.spinner("Processando dados..."):
            try:
                df = pd.read_excel(uploaded_file)
                
                # Identifica CNPJ
                if 'chv_nfe' in df.columns:
                    for chave in df['chv_nfe'].dropna().astype(str):
                        cnpj = get_cnpj_from_chave(chave)
                        if cnpj:
                            st.session_state.empresa_cnpj = cnpj
                            break
                
                # Processa por compet√™ncia
                df['competencia'] = df['chv_nfe'].apply(
                    lambda x: get_competencia_from_chave(str(x)))
                
                st.session_state.processed_data = {}
                for competencia, group in df.groupby('competencia'):
                    st.session_state.processed_data[competencia] = analyze_data(group.to_dict('records'))
                
                st.session_state.file_uploaded = True
                st.success("Dados processados com sucesso!")
                
            except Exception as e:
                st.error(f"Erro ao processar arquivo: {str(e)}")
                st.stop()

# Se√ß√£o de devolu√ß√µes
if st.session_state.processed_data and st.button("üì• Devolu√ß√µes"):
    st.session_state.show_devolucoes = not st.session_state.show_devolucoes

if st.session_state.show_devolucoes:
    with st.expander("üîß Ajuste de Devolu√ß√µes", expanded=True):
        cols = st.columns(4)
        cfops = {
            '1202': cols[0],
            '2202': cols[1], 
            '1411': cols[2],
            '2411': cols[3]
        }
        
        for cfop, col in cfops.items():
            with col:
                st.session_state.devolucoes['valores'][cfop] = st.number_input(
                    f"CFOP {cfop}",
                    min_value=0.0,
                    value=st.session_state.devolucoes['valores'].get(cfop, 0.0),
                    step=0.01,
                    format="%.2f"
                )
        
        if st.button("‚úÖ Confirmar Valores"):
            st.session_state.devolucoes['possui'] = True
            for competencia in st.session_state.processed_data:
                st.session_state.processed_data[competencia] = analyze_data(
                    st.session_state.processed_data[competencia]['rawData']
                )
            st.session_state.show_devolucoes = False
            st.rerun()

# Exibi√ß√£o de resultados
if st.session_state.processed_data:
    st.markdown("---")
    
    if st.session_state.empresa_cnpj:
        st.info(f"**CNPJ Identificado:** {st.session_state.empresa_cnpj}")
    
    competencias = sorted(
        st.session_state.processed_data.keys(),
        key=lambda x: (int(x.split('-')[1]), int(x.split('-')[0])) if x != 'Desconhecido' else (0, 0)
    )
    
    for competencia in competencias:
        comp_data = st.session_state.processed_data[competencia]
        
        with st.expander(f"üóìÔ∏è Compet√™ncia: {competencia.replace('-', '/')}", expanded=True):
            # Tabela de categorias
            st.subheader("üìà Totais por Categoria")
            
            categories = [
                ("Tributado Normal", comp_data.get('tributadoNormal', 0), False),
                ("Tributado Monof√°sico", comp_data.get('tributadoMonofasico', 0), False),
                ("Substituto Normal", comp_data.get('substitutoNormal', 0), False),
                ("Substituto Monof√°sico", comp_data.get('substitutoMonofasico', 0), False),
                ("TOTAL FATURAMENTO", comp_data.get('totalFaturamento', 0), True)
            ]
            
            if comp_data.get('hasDevolucoes', False):
                if comp_data.get('totalDevolucoes', 0) > 0:
                    categories.append(("TOTAL DEVOLU√á√ïES", -comp_data['totalDevolucoes'], True))
                categories.append(("TOTAL L√çQUIDO", comp_data.get('totalLiquido', 0), True))
            
            # Exibi√ß√£o formatada
            for name, value, highlight in categories:
                cols = st.columns([3, 1])
                with cols[0]:
                    st.markdown(f"{'**' if highlight else ''}{name}{'**' if highlight else ''}")
                with cols[1]:
                    st.markdown(
                        f"{'**' if highlight else ''}"
                        f"{'<span class=negative-value>' if value < 0 else ''}"
                        f"R$ {format_number(abs(value) if value < 0 else value)}"
                        f"{'</span>' if value < 0 else ''}"
                        f"{'**' if highlight else ''}",
                        unsafe_allow_html=True
                    )
            
            st.markdown("---")
            
            # Tabela de CFOPs
            st.subheader("üè∑Ô∏è Totais por CFOP")
            
            cfop_data = []
            for cfop in sorted(comp_data.get('cfopTotals', {}).keys()):
                cfop_data.append((cfop, comp_data['cfopTotals'][cfop]))
            
            if st.session_state.devolucoes['possui']:
                for cfop in ['1202', '2202', '1411', '2411']:
                    if st.session_state.devolucoes['valores'][cfop] > 0:
                        cfop_data.append((f"{cfop} (Devolu√ß√£o)", st.session_state.devolucoes['valores'][cfop]))
            
            df_cfop = pd.DataFrame(cfop_data, columns=["CFOP", "Valor"])
            st.dataframe(
                df_cfop.style.format({"Valor": lambda x: f"R$ {format_number(x)}"}),
                use_container_width=True,
                hide_index=True
            )
            
            st.markdown("---")
            
            # Documentos faltantes
            st.subheader("üîç Documentos Faltantes por S√©rie")
            
            total_faltante = sum(len(nums) for nums in comp_data.get('missingNumbers', {}).values())
            st.write(f"**Total de documentos faltantes:** {total_faltante}")
            
            for serie in sorted(comp_data.get('missingNumbers', {}).keys()):
                missing_numbers = comp_data['missingNumbers'][serie]
                if not missing_numbers:
                    continue
                
                with st.expander(f"üìÇ S√©rie {serie} - {len(missing_numbers)} faltantes"):
                    cols = st.columns(5)
                    col_idx = 0
                    
                    for num in sorted(missing_numbers):
                        key = f"{competencia}-{serie}-{num}"
                        with cols[col_idx]:
                            if st.checkbox(
                                str(num),
                                key=key,
                                value=key in st.session_state.canceled_numbers
                            ):
                                st.session_state.canceled_numbers.add(key)
                            else:
                                st.session_state.canceled_numbers.discard(key)
                        col_idx = (col_idx + 1) % 5

# =============================================
# 6. EXPORTA√á√ÉO DE RESULTADOS
# =============================================

if st.session_state.processed_data:
    st.markdown("---")
    st.subheader("üì§ Exportar Resultados")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üíæ Exportar para Excel"):
            try:
                output = BytesIO()
                with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                    # Resumo
                    resumo_data = []
                    for competencia in st.session_state.processed_data:
                        comp_data = st.session_state.processed_data[competencia]
                        resumo = {
                            "Compet√™ncia": competencia.replace('-', '/'),
                            "Tributado Normal": comp_data.get('tributadoNormal', 0),
                            "Tributado Monof√°sico": comp_data.get('tributadoMonofasico', 0),
                            "Substituto Normal": comp_data.get('substitutoNormal', 0),
                            "Substituto Monof√°sico": comp_data.get('substitutoMonofasico', 0),
                            "Total Faturamento": comp_data.get('totalFaturamento', 0),
                            "Documentos Faltantes": sum(len(nums) for nums in comp_data.get('missingNumbers', {}).values())
                        }
                        if comp_data.get('hasDevolucoes', False):
                            resumo.update({
                                "Total Devolu√ß√µes": comp_data.get('totalDevolucoes', 0),
                                "Total L√≠quido": comp_data.get('totalLiquido', 0)
                            })
                        resumo_data.append(resumo)
                    
                    pd.DataFrame(resumo_data).to_excel(writer, sheet_name="RESUMO", index=False)
                    
                    # Planilhas por compet√™ncia
                    for competencia in st.session_state.processed_data:
                        comp_data = st.session_state.processed_data[competencia]
                        
                        excel_data = []
                        excel_data.append(["RELAT√ìRIO DE AN√ÅLISE FISCAL"])
                        excel_data.append(["CNPJ:", st.session_state.empresa_cnpj or "N√£o identificado"])
                        excel_data.append(["Compet√™ncia:", competencia.replace('-', '/')])
                        excel_data.append([""])
                        
                        # Categorias
                        excel_data.append(["TOTAIS POR CATEGORIA"])
                        excel_data.append(["Categoria", "Valor Total"])
                        excel_data.append(["Tributado Normal", comp_data.get('tributadoNormal', 0)])
                        excel_data.append(["Tributado Monof√°sico", comp_data.get('tributadoMonofasico', 0)])
                        excel_data.append(["Substituto Normal", comp_data.get('substitutoNormal', 0)])
                        excel_data.append(["Substituto Monof√°sico", comp_data.get('substitutoMonofasico', 0)])
                        excel_data.append(["TOTAL FATURAMENTO", comp_data.get('totalFaturamento', 0)])
                        
                        if comp_data.get('hasDevolucoes', False):
                            if comp_data.get('totalDevolucoes', 0) > 0:
                                excel_data.append(["TOTAL DEVOLU√á√ïES", -comp_data['totalDevolucoes']])
                            excel_data.append(["TOTAL L√çQUIDO", comp_data.get('totalLiquido', 0)])
                        
                        excel_data.append([""])
                        
                        # CFOPs
                        excel_data.append(["TOTAIS POR CFOP"])
                        excel_data.append(["CFOP", "Valor Total"])
                        for cfop in sorted(comp_data.get('cfopTotals', {}).keys()):
                            excel_data.append([cfop, comp_data['cfopTotals'][cfop]])
                        
                        if st.session_state.devolucoes['possui']:
                            for cfop in ['1202', '2202', '1411', '2411']:
                                if st.session_state.devolucoes['valores'][cfop] > 0:
                                    excel_data.append([f"{cfop} (Devolu√ß√£o)", st.session_state.devolucoes['valores'][cfop]])
                        
                        excel_data.append([""])
                        
                        # Faltantes
                        excel_data.append(["DOCUMENTOS FALTANTES POR S√âRIE"])
                        excel_data.append(["S√©rie", "N√∫mero", "Status"])
                        
                        for serie in sorted(comp_data.get('missingNumbers', {}).keys()):
                            for num in sorted(comp_data['missingNumbers'][serie]):
                                key = f"{competencia}-{serie}-{num}"
                                status = "CANC/INUT" if key in st.session_state.canceled_numbers else "FALTANTE"
                                excel_data.append([serie, num, status])
                        
                        if len(excel_data) <= 12:
                            excel_data.append(["Nenhum n√∫mero faltante na sequ√™ncia."])
                        
                        pd.DataFrame(excel_data).to_excel(
                            writer,
                            sheet_name=competencia[:31],
                            index=False,
                            header=False
                        )
                
                output.seek(0)
                st.download_button(
                    label="‚¨áÔ∏è Baixar Arquivo Excel",
                    data=output,
                    file_name="segregacao_fiscal.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
                
            except Exception as e:
                st.error(f"Erro na exporta√ß√£o: {str(e)}")
    
    with col2:
        if st.button("üìÑ Exportar para PDF"):
            try:
                with tempfile.TemporaryDirectory() as tmpdir:
                    zip_path = os.path.join(tmpdir, "relatorio_fiscal.zip")
                    
                    with zipfile.ZipFile(zip_path, 'w') as zipf:
                        for competencia in st.session_state.processed_data:
                            comp_data = st.session_state.processed_data[competencia]
                            
                            html_content = f"""
                            <!DOCTYPE html>
                            <html>
                            <head>
                                <meta charset="UTF-8">
                                <title>Relat√≥rio Fiscal - {competencia}</title>
                                <style>
                                    body {{ font-family: Arial; margin: 2cm; }}
                                    h1 {{ color: #2c3e50; text-align: center; }}
                                    table {{ width: 100%; border-collapse: collapse; margin: 15px 0; }}
                                    th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                                    th {{ background-color: #3498db; color: white; }}
                                    .negative {{ color: red; }}
                                    .highlight {{ font-weight: bold; }}
                                </style>
                            </head>
                            <body>
                                <h1>Relat√≥rio Fiscal - Compet√™ncia: {competencia.replace('-', '/')}</h1>
                                <p><strong>CNPJ:</strong> {st.session_state.empresa_cnpj or "N√£o identificado"}</p>
                                <p><strong>Data:</strong> {datetime.now().strftime('%d/%m/%Y %H:%M')}</p>
                                
                                <h2>Totais por Categoria</h2>
                                <table>
                                    <tr><th>Categoria</th><th>Valor (R$)</th></tr>
                            """
                            
                            # Adiciona categorias
                            for name, value, _ in [
                                ("Tributado Normal", comp_data.get('tributadoNormal', 0), False),
                                ("Tributado Monof√°sico", comp_data.get('tributadoMonofasico', 0), False),
                                ("Substituto Normal", comp_data.get('substitutoNormal', 0), False),
                                ("Substituto Monof√°sico", comp_data.get('substitutoMonofasico', 0), False),
                                ("TOTAL FATURAMENTO", comp_data.get('totalFaturamento', 0), True)
                            ]:
                                html_content += f"""
                                <tr>
                                    <td{' class="highlight"' if name.startswith('TOTAL') else ''}>{name}</td>
                                    <td{' class="negative"' if value < 0 else ''}>
                                        {format_number(abs(value)) if value < 0 else format_number(value)}
                                    </td>
                                </tr>
                                """
                            
                            if comp_data.get('hasDevolucoes', False):
                                if comp_data.get('totalDevolucoes', 0) > 0:
                                    html_content += f"""
                                    <tr>
                                        <td class="highlight">TOTAL DEVOLU√á√ïES</td>
                                        <td class="negative">{format_number(comp_data['totalDevolucoes'])}</td>
                                    </tr>
                                    """
                                html_content += f"""
                                <tr>
                                    <td class="highlight">TOTAL L√çQUIDO</td>
                                    <td>{format_number(comp_data.get('totalLiquido', 0))}</td>
                                </tr>
                                """
                            
                            # Adiciona CFOPs
                            html_content += """
                                </table>
                                
                                <h2>Totais por CFOP</h2>
                                <table>
                                    <tr><th>CFOP</th><th>Valor (R$)</th></tr>
                            """
                            
                            for cfop in sorted(comp_data.get('cfopTotals', {}).keys()):
                                html_content += f"""
                                <tr>
                                    <td>{cfop}</td>
                                    <td>{format_number(comp_data['cfopTotals'][cfop])}</td>
                                </tr>
                                """
                            
                            if st.session_state.devolucoes['possui']:
                                for cfop in ['1202', '2202', '1411', '2411']:
                                    if st.session_state.devolucoes['valores'][cfop] > 0:
                                        html_content += f"""
                                        <tr>
                                            <td>{cfop} (Devolu√ß√£o)</td>
                                            <td>{format_number(st.session_state.devolucoes['valores'][cfop])}</td>
                                        </tr>
                                        """
                            
                            # Adiciona documentos faltantes
                            html_content += """
                                </table>
                                
                                <h2>Documentos Faltantes por S√©rie</h2>
                            """
                            
                            has_missing = False
                            for serie in sorted(comp_data.get('missingNumbers', {}).keys()):
                                missing_numbers = comp_data['missingNumbers'][serie]
                                if not missing_numbers:
                                    continue
                                
                                has_missing = True
                                html_content += f"""
                                <h3>S√©rie {serie}</h3>
                                <p>Total faltante: {len(missing_numbers)}</p>
                                <div style="margin-bottom: 20px;">
                                """
                                
                                for num in sorted(missing_numbers):
                                    key = f"{competencia}-{serie}-{num}"
                                    if key in st.session_state.canceled_numbers:
                                        html_content += f"""
                                        <span style="display: inline-block; background-color: #ff9999; 
                                            padding: 3px 8px; margin: 2px; border-radius: 3px; 
                                            text-decoration: line-through;">
                                            {num} (CANC/INUT)
                                        </span>
                                        """
                                    else:
                                        html_content += f"""
                                        <span style="display: inline-block; background-color: #ffeb3b; 
                                            padding: 3px 8px; margin: 2px; border-radius: 3px;">
                                            {num}
                                        </span>
                                        """
                                
                                html_content += "</div>"
                            
                            if not has_missing:
                                html_content += "<p>Nenhum n√∫mero faltante na sequ√™ncia.</p>"
                            
                            html_content += """
                                </body>
                                </html>
                            """
                            
                            # Salva no ZIP
                            filename = f"relatorio_{competencia.replace('-', '_')}.html"
                            zipf.writestr(filename, html_content)
                    
                    # Cria bot√£o de download
                    with open(zip_path, "rb") as f:
                        st.download_button(
                            label="‚¨áÔ∏è Baixar Relat√≥rios (HTML para PDF)",
                            data=f,
                            file_name="relatorio_fiscal.zip",
                            mime="application/zip"
                        )
                
                st.info("Para converter para PDF: baixe o ZIP, extraia os arquivos HTML e use 'Imprimir como PDF' no navegador.")
            
            except Exception as e:
                st.error(f"Erro na gera√ß√£o do PDF: {str(e)}")

# =============================================
# 7. RODAP√â E INFORMA√á√ïES ADICIONAIS
# =============================================

st.markdown("---")
st.markdown("""
<div style="text-align: center; margin-top: 2rem; color: #666;">
    <p>Aplica√ß√£o desenvolvida por <strong>Antonio-BWA</strong></p>
    <p>Reposit√≥rio: <a href="https://github.com/Antonio-BWA/An-lise.git" target="_blank">github.com/Antonio-BWA/An-lise</a></p>
</div>
""", unsafe_allow_html=True)

# Verifica√ß√£o final
if st.sidebar.checkbox("Mostrar estado da sess√£o (debug)"):
    st.sidebar.write(st.session_state)
