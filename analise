import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
import base64
from io import BytesIO
import xlsxwriter
from pyxlsb import open_workbook as open_xlsb
import zipfile
import tempfile
import os

# Configuração da página
st.set_page_config(page_title="Segregação Fiscal", layout="wide")

# Título da aplicação
st.title("Segregação Fiscal")

# Variáveis de estado
if 'processed_data' not in st.session_state:
    st.session_state.processed_data = None
if 'canceled_numbers' not in st.session_state:
    st.session_state.canceled_numbers = set()
if 'empresa_cnpj' not in st.session_state:
    st.session_state.empresa_cnpj = None
if 'devolucoes' not in st.session_state:
    st.session_state.devolucoes = {
        'possui': False,
        'valores': {
            '1202': 0,
            '2202': 0,
            '1411': 0,
            '2411': 0
        }
    }

# Funções auxiliares
def format_number(value):
    return f"{float(value or 0):,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")

def get_competencia_from_chave(chave):
    if not chave or not isinstance(chave, str) or len(chave) < 44:
        return 'Desconhecido'
    try:
        aamm = chave[2:6]
        mes = aamm[2:4]
        ano = aamm[0:2]
        return f"{mes}-{ano}"
    except:
        return 'Desconhecido'

def get_cnpj_from_chave(chave):
    if not chave or not isinstance(chave, str) or len(chave) < 44:
        return None
    try:
        cnpj = chave[6:20]
        return format_cnpj(cnpj)
    except:
        return None

def format_cnpj(cnpj):
    if not cnpj or len(cnpj) != 14:
        return cnpj
    return f"{cnpj[:2]}.{cnpj[2:5]}.{cnpj[5:8]}/{cnpj[8:12]}-{cnpj[12:14]}"

def find_missing_numbers(doc_numbers):
    if not doc_numbers or len(doc_numbers) == 0:
        return []
    
    doc_numbers = [num for num in doc_numbers if num is not None]
    if not doc_numbers:
        return []
    
    min_doc = min(doc_numbers)
    max_doc = max(doc_numbers)
    all_numbers = set(doc_numbers)
    missing_numbers = []
    
    for i in range(min_doc, max_doc + 1):
        if i not in all_numbers:
            missing_numbers.append(i)
    
    return missing_numbers

def analyze_data(data):
    df = pd.DataFrame(data)
    
    # Processar séries e números faltantes
    series_data = {}
    if 'ser' in df.columns and 'num_doc' in df.columns:
        for serie, group in df.groupby('ser'):
            series_data[serie or 'Única'] = find_missing_numbers(group['num_doc'].dropna().astype(int).tolist())
    
    # Inicializar resultados
    result = {
        'missingNumbers': series_data,
        'tributadoNormal': 0,
        'tributadoMonofasico': 0,
        'substitutoNormal': 0,
        'substitutoMonofasico': 0,
        'cfopTotals': {},
        'rawData': data,
        'hasDevolucoes': False
    }
    
    # Processar CFOPs e valores
    if 'cfop' in df.columns and 'vl_item' in df.columns:
        df['cfop'] = df['cfop'].astype(str)
        df['vl_item'] = pd.to_numeric(df['vl_item'], errors='coerce').fillna(0)
        
        # Verificar se há devoluções
        cfops_devolucao = ['1202', '2202', '1411', '2411']
        result['hasDevolucoes'] = df['cfop'].isin(cfops_devolucao).any()
        
        # Totais por CFOP
        result['cfopTotals'] = df.groupby('cfop')['vl_item'].sum().to_dict()
        
        # Processar categorias
        if 'monofasico' in df.columns:
            df['monofasico'] = df['monofasico'].fillna(False)
            df['monofasico'] = df['monofasico'].astype(str).str.lower().isin(['true', 'sim', '1', 'yes'])
            
            # Tributado Normal (5101, 5102, 6101, 6102)
            mask_trib = df['cfop'].isin(['5101', '5102', '6101', '6102'])
            result['tributadoNormal'] = df.loc[mask_trib & ~df['monofasico'], 'vl_item'].sum()
            result['tributadoMonofasico'] = df.loc[mask_trib & df['monofasico'], 'vl_item'].sum()
            
            # Substituto (5405, 6404)
            mask_sub = df['cfop'].isin(['5405', '6404'])
            result['substitutoNormal'] = df.loc[mask_sub & ~df['monofasico'], 'vl_item'].sum()
            result['substitutoMonofasico'] = df.loc[mask_sub & df['monofasico'], 'vl_item'].sum()
    
    # Calcular totais
    result['totalFaturamento'] = (
        result['tributadoNormal'] + result['tributadoMonofasico'] + 
        result['substitutoNormal'] + result['substitutoMonofasico']
    )
    
    # Adicionar devoluções manuais
    total_devolucoes = 0
    if st.session_state.devolucoes['possui']:
        for cfop in ['1202', '2202', '1411', '2411']:
            total_devolucoes += st.session_state.devolucoes['valores'][cfop]
    
    result['totalDevolucoes'] = total_devolucoes
    result['totalLiquido'] = result['totalFaturamento'] - result['totalDevolucoes']
    result['hasDevolucoes'] = result['hasDevolucoes'] or st.session_state.devolucoes['possui']
    
    return result

# Upload do arquivo
uploaded_file = st.file_uploader("Carregar Planilha", type=["xlsx", "xls"], 
                                help="Arraste e solte seu arquivo Excel aqui ou clique para selecionar")

if uploaded_file:
    try:
        # Processar o arquivo
        df = pd.read_excel(uploaded_file)
        
        # Encontrar CNPJ da empresa
        if 'chv_nfe' in df.columns:
            for chave in df['chv_nfe'].dropna():
                cnpj = get_cnpj_from_chave(str(chave))
                if cnpj:
                    st.session_state.empresa_cnpj = cnpj
                    break
        
        # Agrupar por competência
        if 'chv_nfe' in df.columns:
            df['competencia'] = df['chv_nfe'].apply(lambda x: get_competencia_from_chave(str(x)))
        else:
            st.warning("Coluna 'chv_nfe' não encontrada no arquivo. Não será possível determinar a competência.")
            df['competencia'] = 'Desconhecido'
        
        # Processar dados por competência
        st.session_state.processed_data = {}
        for competencia, group in df.groupby('competencia'):
            st.session_state.processed_data[competencia] = analyze_data(group.to_dict('records'))
        
        st.success("Arquivo processado com sucesso!")
        
    except Exception as e:
        st.error(f"Erro ao processar o arquivo: {str(e)}")

# Seção de devoluções
if st.session_state.processed_data:
    if st.button("Devoluções"):
        st.session_state.show_devolucoes = not st.session_state.get('show_devolucoes', False)
    
    if st.session_state.get('show_devolucoes', False):
        st.subheader("Informe os valores das devoluções por CFOP:")
        
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            dev_1202 = st.number_input("CFOP 1202", min_value=0.0, step=0.01, format="%.2f")
        with col2:
            dev_2202 = st.number_input("CFOP 2202", min_value=0.0, step=0.01, format="%.2f")
        with col3:
            dev_1411 = st.number_input("CFOP 1411", min_value=0.0, step=0.01, format="%.2f")
        with col4:
            dev_2411 = st.number_input("CFOP 2411", min_value=0.0, step=0.01, format="%.2f")
        
        if st.button("Confirmar Valores"):
            st.session_state.devolucoes = {
                'possui': True,
                'valores': {
                    '1202': dev_1202,
                    '2202': dev_2202,
                    '1411': dev_1411,
                    '2411': dev_2411
                }
            }
            
            # Reprocessar os dados com as devoluções
            for competencia in st.session_state.processed_data:
                st.session_state.processed_data[competencia] = analyze_data(
                    st.session_state.processed_data[competencia]['rawData']
                )
            
            st.success("Valores de devolução atualizados!")
            st.session_state.show_devolucoes = False

# Exibir resultados
if st.session_state.processed_data:
    if st.session_state.empresa_cnpj:
        st.info(f"CNPJ da Empresa: {st.session_state.empresa_cnpj}")
    
    competencias = sorted(st.session_state.processed_data.keys(), 
                         key=lambda x: datetime.strptime(x, '%m-%y') if x != 'Desconhecido' else datetime.min)
    
    for competencia in competencias:
        comp_data = st.session_state.processed_data[competencia]
        
        with st.expander(f"Competência: {competencia.replace('-', '/')}", expanded=True):
            # Tabela de totais por categoria
            st.subheader("Totais por Categoria")
            
            categories = [
                ("Tributado Normal", comp_data['tributadoNormal'], False),
                ("Tributado Monofásico", comp_data['tributadoMonofasico'], False),
                ("Substituto Normal", comp_data['substitutoNormal'], False),
                ("Substituto Monofásico", comp_data['substitutoMonofasico'], False),
                ("TOTAL FATURAMENTO", comp_data['totalFaturamento'], True)
            ]
            
            if comp_data['hasDevolucoes']:
                if comp_data['totalDevolucoes'] > 0:
                    categories.append(("TOTAL DEVOLUÇÕES", -comp_data['totalDevolucoes'], True))
                categories.append(("TOTAL LÍQUIDO", comp_data['totalLiquido'], True))
            
            # Criar DataFrame para exibição
            df_categories = pd.DataFrame(categories, columns=["Categoria", "Valor", "Destaque"])
            df_categories["Valor (R$)"] = df_categories["Valor"].apply(format_number)
            
            # Adicionar formatação para valores negativos
            def highlight_negative(val):
                if val < 0:
                    return 'color: red'
                return ''
            
            styled_df = df_categories[["Categoria", "Valor (R$)"]].style.applymap(
                lambda x: 'font-weight: bold' if x in ["TOTAL FATURAMENTO", "TOTAL LÍQUIDO", "TOTAL DEVOLUÇÕES"] else ''
            ).applymap(
                lambda x: 'color: red' if '-' in x else ''
            )
            
            st.dataframe(styled_df, use_container_width=True, hide_index=True)
            
            # Tabela de CFOPs
            st.subheader("Totais por CFOP")
            
            cfop_data = []
            for cfop in sorted(comp_data['cfopTotals'].keys()):
                cfop_data.append((cfop, comp_data['cfopTotals'][cfop]))
            
            # Adicionar devoluções manuais
            if st.session_state.devolucoes['possui'] and comp_data['totalDevolucoes'] > 0:
                for cfop in ['1202', '2202', '1411', '2411']:
                    if st.session_state.devolucoes['valores'][cfop] > 0:
                        cfop_data.append((f"{cfop} (Devolução)", st.session_state.devolucoes['valores'][cfop]))
            
            df_cfop = pd.DataFrame(cfop_data, columns=["CFOP", "Valor"])
            df_cfop["Valor (R$)"] = df_cfop["Valor"].apply(format_number)
            
            st.dataframe(df_cfop[["CFOP", "Valor (R$)"]], use_container_width=True, hide_index=True)
            
            # Documentos faltantes
            st.subheader("Documentos Faltantes por Série")
            
            total_faltante = sum(len(nums) for nums in comp_data['missingNumbers'].values())
            st.write(f"Total faltante: {total_faltante}")
            
            for serie in sorted(comp_data['missingNumbers'].keys()):
                missing_numbers = comp_data['missingNumbers'][serie]
                if not missing_numbers:
                    continue
                
                with st.expander(f"Série {serie} - {len(missing_numbers)} faltantes"):
                    # Criar checkboxes para marcar como cancelado/inutilizado
                    cols = st.columns(5)
                    col_idx = 0
                    
                    for num in sorted(missing_numbers):
                        key = f"{competencia}-{serie}-{num}"
                        with cols[col_idx]:
                            if st.checkbox(str(num), key=key, 
                                         value=key in st.session_state.canceled_numbers):
                                st.session_state.canceled_numbers.add(key)
                            else:
                                st.session_state.canceled_numbers.discard(key)
                        
                        col_idx = (col_idx + 1) % 5

# Botões de exportação
if st.session_state.processed_data:
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("Exportar para Excel"):
            try:
                # Criar um arquivo Excel
                output = BytesIO()
                writer = pd.ExcelWriter(output, engine='xlsxwriter')
                
                # Resumo de todas as competências
                resumo_data = []
                for competencia in st.session_state.processed_data:
                    comp_data = st.session_state.processed_data[competencia]
                    
                    resumo = {
                        "CNPJ": st.session_state.empresa_cnpj or "Não identificado",
                        "Competência": competencia.replace('-', '/'),
                        "Tributado Normal": comp_data['tributadoNormal'],
                        "Tributado Monofásico": comp_data['tributadoMonofasico'],
                        "Substituto Normal": comp_data['substitutoNormal'],
                        "Substituto Monofásico": comp_data['substitutoMonofasico'],
                        "Total Faturamento": comp_data['totalFaturamento'],
                        "Total Devoluções": comp_data['totalDevolucoes'] if comp_data['hasDevolucoes'] else 0,
                        "Documentos Faltantes": sum(len(nums) for nums in comp_data['missingNumbers'].values())
                    }
                    
                    if comp_data['hasDevolucoes']:
                        resumo["Total Líquido"] = comp_data['totalLiquido']
                    
                    resumo_data.append(resumo)
                
                pd.DataFrame(resumo_data).to_excel(writer, sheet_name="RESUMO", index=False)
                
                # Planilha para cada competência
                for competencia in st.session_state.processed_data:
                    comp_data = st.session_state.processed_data[competencia]
                    
                    # Criar dados para a planilha
                    excel_data = []
                    
                    excel_data.append(["RELATÓRIO DE ANÁLISE FISCAL"])
                    excel_data.append(["CNPJ:", st.session_state.empresa_cnpj or "Não identificado"])
                    excel_data.append(["Competência:", competencia.replace('-', '/')])
                    excel_data.append([""])
                    
                    excel_data.append(["TOTAIS POR CATEGORIA"])
                    excel_data.append(["Categoria", "Valor Total"])
                    excel_data.append(["Tributado Normal", comp_data['tributadoNormal']])
                    excel_data.append(["Tributado Monofásico", comp_data['tributadoMonofasico']])
                    excel_data.append(["Substituto Normal", comp_data['substitutoNormal']])
                    excel_data.append(["Substituto Monofásico", comp_data['substitutoMonofasico']])
                    excel_data.append(["TOTAL FATURAMENTO", comp_data['totalFaturamento']])
                    
                    if comp_data['hasDevolucoes']:
                        if comp_data['totalDevolucoes'] > 0:
                            excel_data.append(["TOTAL DEVOLUÇÕES", -comp_data['totalDevolucoes']])
                        excel_data.append(["TOTAL LÍQUIDO", comp_data['totalLiquido']])
                    
                    excel_data.append([""])
                    
                    excel_data.append(["TOTAIS POR CFOP"])
                    excel_data.append(["CFOP", "Valor Total"])
                    for cfop in sorted(comp_data['cfopTotals'].keys()):
                        excel_data.append([cfop, comp_data['cfopTotals'][cfop]])
                    
                    if st.session_state.devolucoes['possui'] and comp_data['totalDevolucoes'] > 0:
                        for cfop in ['1202', '2202', '1411', '2411']:
                            if st.session_state.devolucoes['valores'][cfop] > 0:
                                excel_data.append([f"{cfop} (Devolução)", st.session_state.devolucoes['valores'][cfop]])
                    
                    excel_data.append([""])
                    
                    excel_data.append(["DOCUMENTOS FALTANTES POR SÉRIE"])
                    excel_data.append(["Série", "Número", "Status"])
                    
                    for serie in sorted(comp_data['missingNumbers'].keys()):
                        missing_numbers = comp_data['missingNumbers'][serie]
                        if not missing_numbers:
                            continue
                        
                        for num in sorted(missing_numbers):
                            key = f"{competencia}-{serie}-{num}"
                            status = "CANC/INUT" if key in st.session_state.canceled_numbers else "FALTANTE"
                            excel_data.append([serie, num, status])
                    
                    if len(excel_data) <= 12:
                        excel_data.append(["Nenhum número faltante na sequência."])
                    
                    # Criar DataFrame e salvar na planilha
                    df_sheet = pd.DataFrame(excel_data)
                    sheet_name = competencia if len(competencia) <= 31 else competencia[:31]
                    df_sheet.to_excel(writer, sheet_name=sheet_name, index=False, header=False)
                
                # Salvar o arquivo
                writer.close()
                output.seek(0)
                
                # Criar link de download
                st.download_button(
                    label="Baixar arquivo Excel",
                    data=output,
                    file_name="SEGREGAÇÃO_FISCAL.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
                
            except Exception as e:
                st.error(f"Erro ao exportar para Excel: {str(e)}")
    
    with col2:
        if st.button("Exportar para PDF"):
            try:
                # Para PDF, você pode usar reportlab ou outra biblioteca
                # Como exemplo, vamos criar um arquivo ZIP com HTMLs que podem ser convertidos para PDF
                with tempfile.TemporaryDirectory() as tmpdir:
                    zip_filename = os.path.join(tmpdir, "RELATORIO_FISCAL.zip")
                    
                    with zipfile.ZipFile(zip_filename, 'w') as zipf:
                        for competencia in st.session_state.processed_data:
                            comp_data = st.session_state.processed_data[competencia]
                            
                            # Criar conteúdo HTML para cada competência
                            html_content = f"""
                            <!DOCTYPE html>
                            <html>
                            <head>
                                <meta charset="UTF-8">
                                <title>Relatório Fiscal - {competencia}</title>
                                <style>
                                    body {{ font-family: Arial; margin: 20px; }}
                                    h1 {{ color: #2c3e50; text-align: center; }}
                                    table {{ width: 100%; border-collapse: collapse; margin: 15px 0; }}
                                    th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                                    th {{ background-color: #3498db; color: white; }}
                                    .negative {{ color: red; }}
                                    .highlight {{ font-weight: bold; }}
                                </style>
                            </head>
                            <body>
                                <h1>Relatório Fiscal - Competência: {competencia.replace('-', '/')}</h1>
                                <p><strong>CNPJ:</strong> {st.session_state.empresa_cnpj or "Não identificado"}</p>
                                <p><strong>Emitido em:</strong> {datetime.now().strftime('%d/%m/%Y %H:%M')}</p>
                                
                                <h2>Totais por Categoria</h2>
                                <table>
                                    <tr><th>Categoria</th><th>Valor (R$)</th></tr>
                            """
                            
                            # Adicionar categorias
                            categories = [
                                ("Tributado Normal", comp_data['tributadoNormal'], False),
                                ("Tributado Monofásico", comp_data['tributadoMonofasico'], False),
                                ("Substituto Normal", comp_data['substitutoNormal'], False),
                                ("Substituto Monofásico", comp_data['substitutoMonofasico'], False),
                                ("TOTAL FATURAMENTO", comp_data['totalFaturamento'], True)
                            ]
                            
                            if comp_data['hasDevolucoes']:
                                if comp_data['totalDevolucoes'] > 0:
                                    categories.append(("TOTAL DEVOLUÇÕES", -comp_data['totalDevolucoes'], True))
                                categories.append(("TOTAL LÍQUIDO", comp_data['totalLiquido'], True))
                            
                            for name, value, highlight in categories:
                                negative_class = "negative" if value < 0 else ""
                                highlight_class = "highlight" if highlight else ""
                                html_content += f"""
                                    <tr>
                                        <td class="{highlight_class}">{name}</td>
                                        <td class="{negative_class} {highlight_class}">{format_number(abs(value)) if value < 0 else format_number(value)}</td>
                                    </tr>
                                """
                            
                            # Adicionar CFOPs
                            html_content += """
                                </table>
                                
                                <h2>Totais por CFOP</h2>
                                <table>
                                    <tr><th>CFOP</th><th>Valor (R$)</th></tr>
                            """
                            
                            for cfop in sorted(comp_data['cfopTotals'].keys()):
                                html_content += f"""
                                    <tr>
                                        <td>{cfop}</td>
                                        <td>{format_number(comp_data['cfopTotals'][cfop])}</td>
                                    </tr>
                                """
                            
                            if st.session_state.devolucoes['possui'] and comp_data['totalDevolucoes'] > 0:
                                for cfop in ['1202', '2202', '1411', '2411']:
                                    if st.session_state.devolucoes['valores'][cfop] > 0:
                                        html_content += f"""
                                            <tr>
                                                <td>{cfop} (Devolução)</td>
                                                <td>{format_number(st.session_state.devolucoes['valores'][cfop])}</td>
                                            </tr>
                                        """
                            
                            # Adicionar documentos faltantes
                            html_content += """
                                </table>
                                
                                <h2>Documentos Faltantes por Série</h2>
                            """
                            
                            has_missing = False
                            for serie in sorted(comp_data['missingNumbers'].keys()):
                                missing_numbers = comp_data['missingNumbers'][serie]
                                if not missing_numbers:
                                    continue
                                
                                has_missing = True
                                html_content += f"""
                                    <h3>Série {serie}</h3>
                                    <p>Total faltante: {len(missing_numbers)}</p>
                                    <div style="display: flex; flex-wrap: wrap; gap: 5px;">
                                """
                                
                                for num in sorted(missing_numbers):
                                    key = f"{competencia}-{serie}-{num}"
                                    if key in st.session_state.canceled_numbers:
                                        html_content += f"""
                                            <div style="background-color: #ff9999; padding: 3px 8px; 
                                                border-radius: 3px; text-decoration: line-through;">
                                                {num} (CANC/INUT)
                                            </div>
                                        """
                                    else:
                                        html_content += f"""
                                            <div style="background-color: #ffeb3b; padding: 3px 8px; border-radius: 3px;">
                                                {num}
                                            </div>
                                        """
                                
                                html_content += "</div>"
                            
                            if not has_missing:
                                html_content += "<p>Nenhum número faltante na sequência.</p>"
                            
                            html_content += """
                                </body>
                                </html>
                            """
                            
                            # Salvar HTML no arquivo ZIP
                            filename = f"RELATORIO_{competencia.replace('-', '_')}.html"
                            zipf.writestr(filename, html_content)
                    
                    # Criar link de download
                    with open(zip_filename, "rb") as f:
                        st.download_button(
                            label="Baixar relatórios em HTML (para PDF)",
                            data=f,
                            file_name="RELATORIO_FISCAL.zip",
                            mime="application/zip"
                        )
                
                st.info("Para converter para PDF, baixe o ZIP, extraia os arquivos HTML e use o navegador para imprimir como PDF.")
                
            except Exception as e:
                st.error(f"Erro ao gerar PDF: {str(e)}")
